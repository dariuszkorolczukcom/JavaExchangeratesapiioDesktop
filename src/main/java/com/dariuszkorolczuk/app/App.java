/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dariuszkorolczuk.app;

import com.google.gson.Gson;

import javax.swing.*;

import lombok.*;

import java.net.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

public class App {
	static DecimalFormat decfor = new DecimalFormat("0.00", DecimalFormatSymbols.getInstance(Locale.ENGLISH));
	static List<JLabel> labels = new ArrayList<>();
	static List<JButton> buttons = new ArrayList<>();

	static Font myFont = new Font("SansSerif", Font.PLAIN, 14);
	static Font myBoldFont = new Font("SansSerif", Font.BOLD, 14);
	public static void main(String[] args) {
		System.out.println("start");
		JFrame f = new JFrame();
		JButton b = new JButton("update");
		System.out.println("created buttton");
		b.setBounds(210, 10, 100, 40);
		f.add(b);
		b.addActionListener(new CheckRates("USD"));
		int height = 60;
		int fromLeft = 10;

		try {
			for (String key : Rates.getRate("PLN").getRates().keySet()) {
				JButton but = new JButton(key + " = " + decfor.format(Rates.getRate("PLN").getRates().get(key)));
				height +=10;
				but.setBounds(fromLeft, height, 180, 40);
				f.add(but);// adding button in JFrame
				but.addActionListener(new CheckRates(key));

				buttons.add(but);
				but.setFont(myFont);
				height += 40;
				if (height >= 610) {
					height = 60;
					fromLeft += 200;
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		f.setSize(620, 670);
		f.setLayout(null);
		f.setVisible(true);
	}
}

class CheckRates implements ActionListener {
	private String base;

	public CheckRates(String base) {
		this.base = base;
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		int i=0;
		try {
			for (String key : Rates.getRate(this.base).getRates().keySet()) {
				JButton btn = App.buttons.get(i++);
				btn.setText(key + " = " + App.decfor.format(Rates.getRate(this.base).getRates().get(key)));
				if (key.equals(this.base)) {
					System.out.println(key + " " + this.base);
					btn.setForeground(Color.PINK);
					btn.setFont(App.myBoldFont);
				} else {
					System.out.println(key + " " + this.base);
					btn.setForeground(Color.BLACK);
					btn.setFont(App.myFont);
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
//change colour if raised/lowered
//ADD FLAGS
//

@Getter
@Setter
class Rates {
	private static HashMap<String, Rates> cache = new HashMap<>();
	private String date;
	private String base;
	HashMap<String, Double> rates;

	public Rates(String base) {
		Gson gson = new Gson();
		try {
			URL oracle = null;

			oracle = new URL("https://api.exchangeratesapi.io/latest?base=" + base);
			URLConnection yc = null;
			yc = oracle.openConnection();

			BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()));
			Rates json = null;
			String inputLine;
			while ((inputLine = in.readLine()) != null) {
				json = gson.fromJson(inputLine, Rates.class);
				System.out.println("got: " + inputLine);
				this.date = json.getDate();
				this.base = json.getBase();
				this.rates = json.getRates();
			}
			in.close();
		} catch (MalformedURLException ex) {
			ex.printStackTrace();
			System.exit(0);
		} catch (IOException ex) {
			ex.printStackTrace();
			System.exit(0);
		} finally {
			System.out.println("after");
		}
	}

	public static Rates getRate(String base) throws IOException {
		if (Rates.cache.containsKey(base)) {
			return cache.get(base);
		} else {
			Rates rate = new Rates(base);
			cache.put(base, rate);
			return rate;
		}
	}
}